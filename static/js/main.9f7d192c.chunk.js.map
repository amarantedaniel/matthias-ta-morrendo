{"version":3,"sources":["components/Chart/index.tsx","data/api.ts","data/glicose.ts","scenes/Home/index.tsx","serviceWorker.js","index.tsx"],"names":["Chart","_ref","data","react_default","a","createElement","es6","width","height","strokeDasharray","dataKey","type","stroke","fetchGlicoseData","Object","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","abrupt","axios","get","then","parseGlicoseDataFromCsvResponse","stop","apply","this","arguments","_ref2","split","map","point","_ref3","_ref4","slicedToArray","date","glicose","parseInt","getMostRecentGlicoseValue","glicoseData","lastData","toConsumableArray","pop","getStatusFromGlicose","undefined","dying","but","App","_useState","useState","_useState2","setGlicoseData","useEffect","status","getHealthStatusFromData","className","components_Chart","Boolean","window","location","hostname","match","ReactDOM","render","Home","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kNA0BeA,EAXD,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAH,OACZC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAqBC,MAAM,MAAMC,OAAQ,KACvCL,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWJ,KAAMA,GACfC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAeG,gBAAgB,QAC/BN,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOI,QAAQ,SACfP,EAAAC,EAAAC,cAACC,EAAA,EAAD,MACAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMK,KAAK,WAAWD,QAAQ,UAAUE,OAAO,2DCfxCC,EAAgB,eAAAZ,EAAAa,OAAAC,EAAA,EAAAD,CAAAE,EAAAZ,EAAAa,KAAG,SAAAC,IAAA,OAAAF,EAAAZ,EAAAe,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAG,OAAA,SAC9BC,IAAMC,IAHN,+GAGoBC,KAAKC,IADK,wBAAAP,EAAAQ,SAAAV,MAAH,yBAAAjB,EAAA4B,MAAAC,KAAAC,YAAA,GAGvBJ,EAAkC,SAAAK,GAAA,OAAAA,EACtC9B,KAGG+B,MAAM,MACNC,IAAI,SAAAC,GAAK,OAAIA,EAAMF,MAAM,OACzBC,IAAI,SAAAE,GAAA,IAAAC,EAAAvB,OAAAwB,EAAA,EAAAxB,CAAAsB,EAAA,GAAEG,EAAFF,EAAA,GAAQG,EAARH,EAAA,SAAsB,CAAEE,OAAMC,QAASC,SAASD,gBCNnDE,EAA4B,SAChCC,GAEA,IAAMC,EAAW9B,OAAA+B,EAAA,EAAA/B,CAAI6B,GAAaG,MAClC,OAAOF,GAAYA,EAASJ,SAGxBO,EAAuB,SAC3BP,GAEA,QAAgBQ,IAAZR,EACJ,QAAQ,GACN,KAAKA,EAAU,GACb,MAAO,CAAES,MAAO,MAAOC,SAAKF,GAC9B,KAAKR,GAAW,IAAMA,GAAW,IAC/B,MAAO,CAAES,MAAO,SAAOC,SAAKF,GAC9B,KAAKR,EAAU,IACb,MAAO,CAAES,MAAO,SAAOC,IAAK,qBAC9B,QACE,SCFSC,UAnBH,WAAM,IAAAC,EACsBC,mBAA6B,IADnDC,EAAAxC,OAAAwB,EAAA,EAAAxB,CAAAsC,EAAA,GACTT,EADSW,EAAA,GACIC,EADJD,EAAA,GAGhBE,oBAAU,WACR3C,IAAmBa,KAAK6B,IACvB,IAEH,IAAME,EDZ+B,SACrCvD,GAEA,IAAMsC,EAAUE,EAA0BxC,GAC1C,OAAO6C,EAAqBP,GCQbkB,CAAwBf,GAEvC,OACExC,EAAAC,EAAAC,cAAA,OAAKsD,UAAU,QACbxD,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAAA,YAAOoD,GAAUA,EAAOR,OACxB9C,EAAAC,EAAAC,cAAA,YAAOoD,GAAUA,EAAOP,KACxB/C,EAAAC,EAAAC,cAACuD,EAAD,CAAO1D,KAAMyC,OCTCkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,MAAUC,SAASC,eAAe,SD4H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/C,KAAK,SAAAgD,GACjCA,EAAaC","file":"static/js/main.9f7d192c.chunk.js","sourcesContent":["import React from 'react'\nimport { GlicoseData } from 'data'\nimport {\n  LineChart,\n  ResponsiveContainer,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n} from 'recharts'\n\ninterface Props {\n  data: Array<GlicoseData>\n}\n\nconst Chart = ({ data }: Props) => (\n  <ResponsiveContainer width=\"95%\" height={300}>\n    <LineChart data={data}>\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <XAxis dataKey=\"date\" />\n      <YAxis />\n      <Line type=\"monotone\" dataKey=\"glicose\" stroke=\"#8884d8\" />\n    </LineChart>\n  </ResponsiveContainer>\n)\n\nexport default Chart\n","import axios from 'axios'\nimport { GlicoseResponse, GlicoseData } from 'data'\n\nconst driveUrl =\n  'https://docs.google.com/spreadsheets/d/1rgUTX_90dFgdIWYj5lfooY2q8WEZfxmD6D78DsB6sew/export?exportFormat=csv'\n\nexport const fetchGlicoseData = async (): Promise<Array<GlicoseData>> =>\n  axios.get(driveUrl).then(parseGlicoseDataFromCsvResponse)\n\nconst parseGlicoseDataFromCsvResponse = ({\n  data,\n}: GlicoseResponse): Array<GlicoseData> =>\n  data\n    .split('\\n')\n    .map(point => point.split(','))\n    .map(([date, glicose]) => ({ date, glicose: parseInt(glicose) }))\n","import { GlicoseStatus, GlicoseData } from 'data'\n\nexport const getHealthStatusFromData = (\n  data: Array<GlicoseData>,\n): GlicoseStatus | undefined => {\n  const glicose = getMostRecentGlicoseValue(data)\n  return getStatusFromGlicose(glicose)\n}\n\nconst getMostRecentGlicoseValue = (\n  glicoseData: Array<GlicoseData>,\n): number | undefined => {\n  const lastData = [...glicoseData].pop()\n  return lastData && lastData.glicose\n}\n\nconst getStatusFromGlicose = (\n  glicose: number | undefined,\n): GlicoseStatus | undefined => {\n  if (glicose === undefined) return undefined\n  switch (true) {\n    case glicose < 80:\n      return { dying: 'SIM', but: undefined }\n    case glicose >= 80 && glicose <= 120:\n      return { dying: 'NÃO', but: undefined }\n    case glicose > 120:\n      return { dying: 'NÃO', but: 'mas ta se fudendo' }\n    default:\n      return undefined\n  }\n}\n","import React, { useState, useEffect } from 'react'\nimport Chart from 'components/Chart'\nimport { fetchGlicoseData } from 'data/api'\nimport { getHealthStatusFromData } from 'data/glicose'\nimport { GlicoseData } from 'data'\nimport './home.scss'\n\nconst App = () => {\n  const [glicoseData, setGlicoseData] = useState<Array<GlicoseData>>([])\n\n  useEffect(() => {\n    fetchGlicoseData().then(setGlicoseData)\n  }, [])\n\n  const status = getHealthStatusFromData(glicoseData)\n\n  return (\n    <div className=\"home\">\n      <h1>Matthias ta morrendo?</h1>\n      <span>{status && status.dying}</span>\n      <span>{status && status.but}</span>\n      <Chart data={glicoseData} />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Home from 'scenes/Home'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<Home />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}