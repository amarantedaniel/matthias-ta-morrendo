{"version":3,"sources":["components/Chart/index.js","scenes/Home/index.js","serviceWorker.js","index.js"],"names":["Chart","_ref","data","react_default","a","createElement","es6","width","height","strokeDasharray","dataKey","type","stroke","fetchData","axios","get","parseGlicoseDataFromCsvResponse","split","map","point","date","glicose","getHealthStatusFromData","getMostRecentGlicoseValue","getStatusFromGlicose","glicoseData","lastData","Object","toConsumableArray","pop","dying","but","App","_useState","useState","_useState2","slicedToArray","setGlicoseData","useEffect","then","status","className","components_Chart","Boolean","window","location","hostname","match","ReactDOM","render","Home","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8OAYeA,EATD,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAH,OACZC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,MAAO,KAAMC,OAAQ,IAAKN,KAAMA,GACzCC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAeG,gBAAgB,QAC/BN,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOI,QAAQ,SACfP,EAAAC,EAAAC,cAACC,EAAA,EAAD,MACAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMK,KAAK,WAAWD,QAAQ,UAAUE,OAAO,cCkB7CC,UAAY,kBAChBC,IAAMC,IACJ,iHAGEC,EAAkC,SAAAf,GAAA,OAAAA,EAAGC,KAEtCe,MAAM,MACNC,IAAI,SAAAC,GAAK,OAAIA,EAAMF,MAAM,OACzBC,IAAI,SAAAC,GAAK,MAAK,CAAEC,KAAMD,EAAM,GAAIE,QAASF,EAAM,OAE9CG,EAA0B,SAAApB,GAC9B,IAAMmB,EAAUE,EAA0BrB,GAC1C,OAAOsB,EAAqBH,IAGxBE,EAA4B,SAAAE,GAChC,IAAMC,EAAWC,OAAAC,EAAA,EAAAD,CAAIF,GAAaI,MAClC,OAAOH,GAAYA,EAASL,SAGxBG,EAAuB,SAAAH,GAC3B,QAAQ,GACN,KAAKA,EAAU,GACb,MAAO,CAAES,MAAO,OAClB,KAAKT,GAAW,IAAMA,GAAW,IAC/B,MAAO,CAAES,MAAO,UAClB,KAAKT,EAAU,IACb,MAAO,CAAES,MAAO,UAAQC,IAAK,qBAC/B,QACE,SAISC,EAvDH,WAAM,IAAAC,EACsBC,mBAAS,IAD/BC,EAAAR,OAAAS,EAAA,EAAAT,CAAAM,EAAA,GACTR,EADSU,EAAA,GACIE,EADJF,EAAA,GAGhBG,oBAAU,WACRzB,IACG0B,KAAKvB,GACLuB,KAAKF,IACP,IAEH,IAAMG,EAASlB,EAAwBG,GAEvC,OACEtB,EAAAC,EAAAC,cAAA,OAAKoC,UAAU,QACbtC,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAAA,YAAOmC,GAAUA,EAAOV,OACxB3B,EAAAC,EAAAC,cAAA,YAAOmC,GAAUA,EAAOT,KACxB5B,EAAAC,EAAAC,cAACqC,EAAD,CAAOxC,KAAMuB,MCTCkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAAUC,SAASC,eAAe,SD4H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhB,KAAK,SAAAiB,GACjCA,EAAaC","file":"static/js/main.98ae0f13.chunk.js","sourcesContent":["import React from 'react'\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid } from 'recharts'\n\nconst Chart = ({ data }) => (\n  <LineChart width={1500} height={300} data={data}>\n    <CartesianGrid strokeDasharray=\"3 3\" />\n    <XAxis dataKey=\"date\" />\n    <YAxis />\n    <Line type=\"monotone\" dataKey=\"glicose\" stroke=\"#8884d8\" />\n  </LineChart>\n)\n\nexport default Chart\n","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport Chart from 'components/Chart'\nimport './home.scss'\n\nconst App = () => {\n  const [glicoseData, setGlicoseData] = useState([])\n\n  useEffect(() => {\n    fetchData()\n      .then(parseGlicoseDataFromCsvResponse)\n      .then(setGlicoseData)\n  }, [])\n\n  const status = getHealthStatusFromData(glicoseData)\n\n  return (\n    <div className=\"home\">\n      <h1>Matthias ta morrendo?</h1>\n      <span>{status && status.dying}</span>\n      <span>{status && status.but}</span>\n      <Chart data={glicoseData} />\n    </div>\n  )\n}\n\nconst fetchData = () =>\n  axios.get(\n    'https://docs.google.com/spreadsheets/d/1rgUTX_90dFgdIWYj5lfooY2q8WEZfxmD6D78DsB6sew/export?exportFormat=csv',\n  )\n\nconst parseGlicoseDataFromCsvResponse = ({ data }) =>\n  data\n    .split('\\n')\n    .map(point => point.split(','))\n    .map(point => ({ date: point[0], glicose: point[1] }))\n\nconst getHealthStatusFromData = data => {\n  const glicose = getMostRecentGlicoseValue(data)\n  return getStatusFromGlicose(glicose)\n}\n\nconst getMostRecentGlicoseValue = glicoseData => {\n  const lastData = [...glicoseData].pop()\n  return lastData && lastData.glicose\n}\n\nconst getStatusFromGlicose = glicose => {\n  switch (true) {\n    case glicose < 60:\n      return { dying: 'SIM' }\n    case glicose >= 60 && glicose <= 120:\n      return { dying: 'NÃO' }\n    case glicose > 120:\n      return { dying: 'NÃzO', but: 'mas ta se fudendo' }\n    default:\n      return undefined\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Home from 'scenes/Home'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<Home />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}